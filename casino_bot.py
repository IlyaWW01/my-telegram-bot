import os
import random
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SLOT_SYMBOLS = ["üçí", "üçã", "üçä", "üçá", "üîî", "7Ô∏è‚É£"]
ROULETTE_NUMBERS = list(range(0, 37))
ANIMATION_STEPS = 8
ANIMATION_DELAY = 0.2
GAMES_FOR_ADS = 6  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–µ–∫–ª–∞–º—ã
AD_MESSAGE = (
    "üî• –°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –≤–µ–∑–µ—Ç! –ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:\n"
    "https://1wrjmw.com/?open=register&p=q8uw"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    async with aiosqlite.connect("casino.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS players (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                credits INTEGER DEFAULT 1000,
                slots_played INTEGER DEFAULT 0,
                roulette_played INTEGER DEFAULT 0
            )
        """)
        await db.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé∞ –°–ª–æ—Ç—ã (10 –∫—Ä–µ–¥–∏—Ç–æ–≤)"), KeyboardButton(text="üé≤ –†—É–ª–µ—Ç–∫–∞ (20 –∫—Ä–µ–¥–∏—Ç–æ–≤)")],
            [KeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")]
        ],
        resize_keyboard=True
    )

# –ê–Ω–∏–º–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤
async def animate_slots(message: types.Message, final_result):
    for i in range(ANIMATION_STEPS):
        frame = [random.choice(SLOT_SYMBOLS) for _ in range(3)]
        await message.edit_text(f"üé∞ –ö—Ä—É—Ç–∏–º...\n{' | '.join(frame)}")
        await asyncio.sleep(ANIMATION_DELAY)
    await message.edit_text(f"üé∞ {' | '.join(final_result)}")

# –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
async def animate_roulette(message: types.Message, final_number):
    for i in range(ANIMATION_STEPS):
        frame_num = random.choice(ROULETTE_NUMBERS)
        color = get_color_for_number(frame_num)
        await message.edit_text(f"üé≤ –ö—Ä—É—Ç–∏—Ç—Å—è...\n{color} {frame_num}")
        await asyncio.sleep(ANIMATION_DELAY)
    final_color = get_color_for_number(final_number)
    await message.edit_text(f"üé≤ {final_color} {final_number}")

def get_color_for_number(number):
    if number == 0:
        return "üü¢"
    elif (1 <= number <= 10 and number % 2 == 1) or (11 <= number <= 18 and number % 2 == 0) or (19 <= number <= 28 and number % 2 == 1) or (29 <= number <= 36 and number % 2 == 0):
        return "üî¥"
    else:
        return "‚ö´"

async def check_for_advertisement(user_id: int, game_type: str, message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    async with aiosqlite.connect("casino.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        if game_type == "slots":
            query = "SELECT slots_played FROM players WHERE user_id = ?"
            update_query = "UPDATE players SET slots_played = slots_played + 1 WHERE user_id = ?"
        else:
            query = "SELECT roulette_played FROM players WHERE user_id = ?"
            update_query = "UPDATE players SET roulette_played = roulette_played + 1 WHERE user_id = ?"
        
        async with db.execute(query, (user_id,)) as cursor:
            games_played = (await cursor.fetchone())[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä
        await db.execute(update_query, (user_id,))
        await db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
        if games_played > 0 and games_played % GAMES_FOR_ADS == 0:
            await message.answer(AD_MESSAGE)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)

    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT 1 FROM players WHERE user_id = ?", (user_id,)) as cursor:
            if not await cursor.fetchone():
                await db.execute(
                    "INSERT INTO players (user_id, username) VALUES (?, ?)",
                    (user_id, username)
                )
                await db.commit()
                await message.answer(
                    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 1000 –∫—Ä–µ–¥–∏—Ç–æ–≤.",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer("üîÑ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=get_main_keyboard())

@dp.message(lambda m: m.text == "üé∞ –°–ª–æ—Ç—ã (10 –∫—Ä–µ–¥–∏—Ç–æ–≤)")
async def play_slots(message: types.Message):
    user_id = message.from_user.id
    cost = 10

    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT credits FROM players WHERE user_id = ?", (user_id,)) as cursor:
            credits = (await cursor.fetchone())[0]

        if credits < cost:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return

        msg = await message.answer("üé∞ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ...")
        result = [random.choice(SLOT_SYMBOLS) for _ in range(3)]
        await animate_slots(msg, result)

        if result[0] == result[1] == result[2]:
            win = 50
        elif result[0] == result[1] or result[1] == result[2]:
            win = 20
        else:
            win = -cost

        await db.execute(
            "UPDATE players SET credits = credits + ? WHERE user_id = ?",
            (win, user_id)
        )
        await db.commit()

        if win > 0:
            await message.answer(
                f"üéâ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –∫—Ä–µ–¥–∏—Ç–æ–≤!</b>\n"
                f"üíé –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {' | '.join(result)}",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(
                f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {abs(win)} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"üåÄ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {' | '.join(result)}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã
        await check_for_advertisement(user_id, "slots", message)

@dp.message(lambda m: m.text == "üé≤ –†—É–ª–µ—Ç–∫–∞ (20 –∫—Ä–µ–¥–∏—Ç–æ–≤)")
async def play_roulette(message: types.Message):
    user_id = message.from_user.id
    cost = 20

    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT credits FROM players WHERE user_id = ?", (user_id,)) as cursor:
            credits = (await cursor.fetchone())[0]

        if credits < cost:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
            return

        msg = await message.answer("üé≤ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É–ª–µ—Ç–∫—É...")
        number = random.randint(0, 36)
        await animate_roulette(msg, number)

        color = get_color_for_number(number)
        if number == 0:
            win = cost * 35
        elif color == "üî¥":
            win = cost * 1.5
        else:
            win = -cost

        await db.execute(
            "UPDATE players SET credits = credits + ? WHERE user_id = ?",
            (win, user_id)
        )
        await db.commit()

        if win > 0:
            await message.answer(
                f"üéâ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –∫—Ä–µ–¥–∏—Ç–æ–≤!</b>\n"
                f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {color} {number}",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(
                f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {abs(win)} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {color} {number}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã
        await check_for_advertisement(user_id, "roulette", message)

@dp.message(lambda m: m.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT credits FROM players WHERE user_id = ?", (user_id,)) as cursor:
            credits = (await cursor.fetchone())[0]

    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("üé∞ –ö–∞–∑–∏–Ω–æ-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.run(main())